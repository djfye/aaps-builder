#!/bin/sh

BUILD_LOG=/home/aaps/build.log

# Check to see if the keystore file exists
# If not generate a new one with default settings
echo -e "\tChecking if keystore exists ... \c"
if [ ! -e "${KEYSTORE_FILE}" ]; then
    echo "[failed]"
    echo -e "\tGenerating a new default keystore ... \c"
    keytool \
        -genkey \
        -v \
        -keystore "${KEYSTORE_FILE}" \
        -alias "${KEYSTORE_ALIAS}" \
        -keyalg RSA \
        -keysize 2048 \
        -validity 10000 \
        -keypass "${KEYSTORE_PASSWORD}" \
        -storepass "${KEYSTORE_PASSWORD}" \
        -noprompt \
        -dname "CN=, OU=, O=AndroidAPS, L=, S=, C=" &> "${BUILD_LOG}"

    if [ -e ${KEYSTORE_FILE} ]; then 
        echo "[ok]"
    else
        echo "[failed]"
        exit 1
    fi
else
    echo "[ok]"
fi

cd /tmp || exit

if [ -d AndroidAPS ]; then
    echo -e "\tDeleting old AndroidAPS ... \c"
    rm -rf AndroidAPS &> "${BUILD_LOG}"

	if [ ! -d AndroidAPS ]; then 
		echo "[ok]"
	else
		echo "[failed]"
		exit 1
	fi
fi

if [ ! -d AndroidAPS ]; then
    echo -e "\tChecking out AndroidAPS from git ... \c"
    git clone -b "${VERSION}" --depth 1 https://github.com/nightscout/AndroidAPS &> "${BUILD_LOG}"

	if [ -d AndroidAPS ]; then 
		echo "[ok]"
	else
		echo "[failed]"
		exit 1
	fi
fi

cd AndroidAPS || exit

echo -e "\tApplying Patches ... \c"
for FILE in $(find ../patches/*.patch)
do
    git apply < "${FILE}"
done
echo "[ok]"

echo -e "\tBuilding Version ${VERSION} APKs (This may take some time) ... \c"
./gradlew assembleRelease &> "${BUILD_LOG}"
if [ -d ./app/build/outputs/ ]; then
    echo "[ok]"
else
    echo "[failed]"
    exit 1
fi


# Setup APK Tools
if [ ! -e /usr/bin/zipalign ]; then
    ln -s "$(find / -name zipalign)" /usr/bin/zipalign
fi
if [ ! -e /usr/bin/apksigner ]; then
    ln -s "$(find / -name apksigner)" /usr/bin/apksigner
fi

APK_FILES=$(find "$(pwd)/app/build/outputs/" -name '*-release-unsigned.apk')

# Sign all the APKs
for apk in $APK_FILES; do
    FILENAME=$(basename "$apk" | cut -d- -f 1-3)
    if [ -e "${FILENAME}-aligned.apk" ]; then
        rm "${FILENAME}-aligned.apk"
    fi
    if [ -e "${FILENAME}-signed.apk" ]; then
        rm "${FILENAME}-signed.apk"
    fi

    echo -e "\tAligning ${FILENAME}.apk ... \c"
    zipalign -v -p 4 "$apk" "${FILENAME}-aligned.apk" &> "${BUILD_LOG}"
    if [ -e "${FILENAME}-aligned.apk" ]; then
        echo "[ok]"
    else
        echo "[failed]"
        exit 1
    fi

    echo -e "\tSigning ${FILENAME}.apk ... \c"
    apksigner sign \
        --ks /home/aaps/"${KEYSTORE_FILE}" \
        --ks-pass pass:"${KEYSTORE_PASSWORD}" \
        --key-pass pass:"${KEYSTORE_PASSWORD}" \
        --out "${FILENAME}"-signed.apk \
        "${FILENAME}-aligned.apk" &> "${BUILD_LOG}"

    if [ -e "${FILENAME}-signed.apk" ]; then 
        echo "[ok]"
    else
        echo "[failed]"
        exit 1
    fi

    mkdir /home/aaps/apk
    cp "${FILENAME}-signed.apk" "/home/aaps/apk/${FILENAME}-signed-${VERSION}.apk"
    chmod 777 "/home/aaps/apk/${FILENAME}-signed-${VERSION}.apk"
done

echo -e "\tStarting local web server ... \c"
httpd -k start &> "${BUILD_LOG}"

if [ $? -eq 0 ]; then
    echo "[ok]"
else
    echo "[failed: ${RESULT}]"
    exit 1
fi

echo "-----------------------"
echo "--- Build Complete ----"
echo "-----------------------"

MACHINE_IP=$(ifconfig eth0 | grep Mask | awk '{print $2}'| cut -f2 -d:)

echo ""
echo "Installation Instrcutions:"
echo "Download app-full-release-signed-${VERSION}.apk and install."
echo ""
echo "Visit http://${MACHINE_IP}:8080/ using the phone you wish to install AndroidAPS onto."
echo "Alternatively if it is not possible to access the files using your phone open the link in a browser on this computer, download the file and transfer to the phone."
echo ""
echo "When you have downloaded the apk press ctrl+c to finish."

sleep $WAITTIME

exit 0
